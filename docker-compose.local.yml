version: "3"

volumes: 
  grafana-storage:

services:
  config-server:
    build:
      context: ./config-server
    expose:
      - 8000
    env_file:
      - env_local.env
    restart: on-failure

  discovery:
    build:
      context: ./discovery-server
    env_file: env_local.env
    expose:
      - 8001
    ports:
      - "8001:8001"
    depends_on:
      - config-server
    entrypoint:
      - ./wait
      - config-server:8000
      - -t
      - "300"
      - --
      - java
      - -jar
      - /usr/app/app.jar
    restart: on-failure

  gateway:
    build:
      context: ./gateway
    env_file: env_local.env
    expose:
      - 8080
    ports:
      - "8080:8080"
    depends_on:
      - discovery
    entrypoint:
      - ./wait
      - discovery:8001
      - -t
      - "300"
      - --
      - java
      - -jar
      - /usr/app/app.jar
    restart: on-failure

  # gateway2:
  #   build:
  #     context: ./gateway2
  #   env_file: env_local.env
  #   expose:
  #     - 8080
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - discovery
  #   entrypoint:
  #     - ./wait
  #     - discovery:8001
  #     - -t
  #     - "300"
  #     - --
  #     - java
  #     - -jar
  #     - /usr/app/app.jar
  #   restart: on-failure

  user-service:
    build:
      context: ./gablum-user-management
    env_file: env_local.env
    depends_on:
      - discovery
    entrypoint:
      - ./wait
      - discovery:8001
      - -t
      - "300"
      - --
      - java
      - -jar
      - /usr/app/app.jar
    restart: on-failure

  webapp:
    build:
      context: ./gablum-webapp
      dockerfile: DockerfileDevelop
    env_file: env_local.env
    depends_on:
      - discovery
    entrypoint:
      - ./wait
      - discovery:8001
      - -t
      - "300"
      - --
      - java
      - -jar
      - /usr/app/app.jar
    restart: on-failure

  # webapp:
  #    build:
  #      context: ./gablum-webapp/src/main/resources/frontend
  #      dockerfile: DockerFileLocal
  #    env_file: env_local.env
  #    restart: on-failure

  auctions:
    build:
      context: ./gablum-auction/auctions
    env_file: env_local.env
    depends_on:
      - discovery
    entrypoint:
      - ./wait
      - discovery:8001
      - -t
      - "300"
      - --
      - java
      - -jar
      - /usr/app/app.jar
    restart: on-failure
    ports: 
      - "4000:4000"

  # bid:
  #   build:
  #     context: ./gablum-auction/bid
  #   env_file: env_local.env
  #   depends_on:
  #     - discovery
  #   entrypoint:
  #     - ./wait
  #     - discovery:8001
  #     - -t
  #     - "300"
  #     - --
  #     - java
  #     - -jar
  #     - /usr/app/app.jar
  #   restart: on-failure

  proposals:
    build:
      context: ./gablum-proposals
    env_file: env_local.env
    depends_on:
      - discovery
    entrypoint:
      - ./wait
      - discovery:8001
      - -t
      - "300"
      - --
      - java
      - -jar
      - /usr/app/app.jar
    restart: on-failure

  scheduler:
    build:
      context: ./gablum-scheduler
    env_file: env_local.env
    depends_on:
      - discovery
    entrypoint:
      - ./wait
      - discovery:8001
      - -t
      - "300"
      - --
      - java
      - -jar
      - /usr/app/app.jar
    restart: on-failure

  contracts:
    build:
      context: ./gablum-contracts
    env_file: env_local.env
    depends_on:
      - discovery
    entrypoint:
      - ./wait
      - discovery:8001
      - -t
      - "300"
      - --
      - java
      - -jar
      - /usr/app/app.jar
    restart: on-failure
  
  mongodb:
    image: 'mongo:latest'
    restart: always
    volumes:
      - '$HOME/mongo_data/gablumDB:/data/db'
    environment:
      MONGO_INITDB_ROOT_USERNAME: gablum
      MONGO_INITDB_ROOT_PASSWORD: GaB1uM
    ports:
      - '27017:27017'

  rabbitmq:
    image: rabbitmq:management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - $HOME/rabbitmq_data/gablumMQ:/data/db
    environment:
      RABBITMQ_DEFAULT_USER: "gablum"
      RABBITMQ_DEFAULT_PASS: "GaB1uM"

  prometheus:
    image: prom/prometheus:v2.14.0
    volumes:
      - ./prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090"
    restart: always
  
  grafana:
    image: grafana/grafana
    volumes:
      - grafana-storage:/var/lib/grafana
    environment: 
      GF_SERVER_SERVE_FROM_SUB_PATH: 'true'
      GF_SERVER_ROOT_URL: http://localhost:3000/grafana
    ports: 
      - "3000:3000"